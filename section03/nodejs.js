// React, Next.js, Vue.js 모두 Node.js를 기반으로 동작하는 기술

// Node.js
// 웹 브라우저가 아닌 환경에서 JavaScript를 실행할 수 있는 환경
// 언어를 실행하는 환경을 구동기(Run Time)이라 한다.

// js는 웹 페이지 내부의 상호 작용을 개발할 목적으로 만들어진 간단한 스크립트 언어
// 이 목적 때문에 문법이 매우 유연하고 편리하게 설계가 되어 생산성이 매우 높았다.
// 이제는 웹 브라우저 밖에서 사용하기를 원함 -> Node.js가 등장하면서 js는 어디서든 동작하게 되었고
// 웹 서버, 모바일 앱, 데스크톱 앱 등을 만들 수 있게 되면서 태생적 한계를 벗어날 수 있게 되었다.

// npm (node package manager)
// 패키지를 관리하는 도구

// 프로젝트
// 특정 목적을 갖는 프로그램의 단위
// node.js 환경에서는 패키지라고 한다.

// scripts
// 미리 설정한 명령어를 실행하는 매크로

// 모듈 시스템
// 모듈을 다루는 시스템

// 모듈
// 온라인 쇼핑몰
// 회원 관리 기능, 장바구니 기능, 결제 기능
// 이런 기능들을 하나의 파일로 관리하는 것이 아니라 각 기능별로 파일을 만들어 관리하는 것이 효율적
// 이렇게 기능별로 나누어진 각 파일을 모듈이라고 한다.
// 모듈을 생성하고, 불러오고, 사용하는 등의 모듈을 다르는 다양한 기능을 제공하는 시스템을 모듈 시스템이라 한다.
// js에는 Common JS, ES Module, AMD, UMD 등등 여러 시스템이 존재한다.

// Common JS와 ES Module을 동시에 사용할 수 없다
// ES Module이 최신 문법 (export, import, default)

// 라이브러리
// 개발에 필요한 다양한 기능들을 미리 만들어 모듈화 해놓은 것
// dependencies (의존)
// 해당 라이브러리가 있어야 동작한다
// node_modules
// 설치한 라이브러리가 실제로 저장되는 공간
// package-lock.json
// 패키지가 사용하고 있는 라이브러리의 버전이나 정보를 package.json 보다 정확하고 엄밀하게 관리하는 파일
